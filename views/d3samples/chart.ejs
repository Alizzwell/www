<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>

<style>
	.axis path,
	.axis line {
		fill: none;
		stroke: #000;
		shape-rendering: crispEdges;
	}

	.bar {
		fill: orange;
	}

	.bar:hover {
		fill: orangered ;
	}

	.x.axis path {
		display: none;
	}

	.d3-tip {
		line-height: 1;
		font-weight: bold;
		padding: 12px;
		background: rgba(0, 0, 0, 0.8);
		color: #fff;
		border-radius: 2px;
	}

	/* Creates a small triangle extender for the tooltip */
	.d3-tip:after {
		box-sizing: border-box;
		display: inline;
		font-size: 10px;
		width: 100%;
		line-height: 1;
		color: rgba(0, 0, 0, 0.8);
		content: "\25BC";
		position: absolute;
		text-align: center;
	}

	/* Style northward tooltips differently */
	.d3-tip.n:after {
		margin: -1px 0 0 0;
		top: 100%;
		left: 0;
	}
</style>

<script>
	var x, y;
	var svg;
	var width;
	var height;
	var duration = 500;

	function onBind(scheduler) {
		var margin = {top: 40, right: 20, bottom: 30, left: 40};
								
		width = 800 - margin.left - margin.right,
		height = 500 - margin.top - margin.bottom;

		x = d3.scale
			.ordinal()
			.rangeRoundBands([0, width], .1);
		y = d3.scale
			.linear()
			.range([height, 0]);
								
		var xAxis = d3.svg.axis()
			.scale(x)
			.orient("bottom");

		var tip = d3.tip()
			.attr('class', 'd3-tip')
			.offset([-12, 0])
			.html(function(d) {
				return "<span style='color:red'>" + d + "</span>";
			});

		svg = d3.select("#canvas").append("svg")
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				.append("g")
				.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		svg.call(tip);

		var data;
		var i = 1;
		var indexes;
		var arr;
		var intervalId;
		var active = true;

		var arr = scheduler.getTarget('A').data;

		indexes = [];
		for (var i = 0; i < arr.length; i++) {
			indexes.push(i);
		}
								    
		x.domain(indexes);
		y.domain([0, d3.max(arr)]);
							    
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(xAxis);
								    
		svg.selectAll(".bar")
			.data(arr)
			.enter().append("rect")
			.attr("class", "bar")
			.attr("x", function(d, i) { return x(i); })
			.attr("width", x.rangeBand())
			.attr("y", function(d) { return y(d); })
			.attr("height", function(d) { return height - y(d); })
			.on('mouseover', tip.show)
			.on('mouseout', tip.hide);
								    
		svg.select(".x.axis")
			.selectAll("text")
			.style("font-size", "10px");
	}

	function onStep(scheduler) {
		console.log(scheduler.getLine());
		// update(scheduler.getTarget('A').data);
	}

	function onChange(scheduler, info) {
		console.log(JSON.stringify(info));
		update(info['A'].data);
	}

	function update(arr) {
		y.domain([0, d3.max(arr)]);
							    
		svg.selectAll(".bar")
			.data(arr)
			.transition()
			.duration(duration)
			.attr("width", x.rangeBand())
			.attr("y", function(d) { return y(d); })
			.attr("height", function(d) { return height - y(d); });
	}

</script>